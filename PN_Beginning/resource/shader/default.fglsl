#version 450 core

in VS_OUT {
	vec3 position;
	vec3 normal;
	vec2 tc;
} fs_in;

uniform vec4 ambient;
uniform vec4 specular;
uniform float gloss;

layout (binding = 0) uniform sampler2D diffuseMap;

uniform vec3 cameraPosition;

out vec4 colour;

const int POINT_LIGHT = 0;
const int DIRECTIONAL_LIGHT = 1;
const int SPOTLIGHT = 2;

struct Light {
	vec3 position;
	vec3 direction;
	vec3 colour;
	int type;
	float intensity;
	float innerRadians;
	float outerRadians;
	float maxRadius;
};

const int MAX_LIGHTS = 4;

uniform int num_lights;
uniform Light lightUni[MAX_LIGHTS];

// used for spotlight to shade when point is between the inner and outer angle boundaries
float interpolate(float x, float a, float b) {
//	return (x * (1/(b - a))) - (a / (b - a));
	return smoothstep(a, b, x);
}

vec4 shadePoint(vec3 position, vec3 normal, Light light) {
	
	// Calculate maximum colour for diffuse and specular
	vec4 diffuseColour = vec4(light.colour, 1.0) * texture(diffuseMap, fs_in.tc);
	vec4 specularColour = vec4(light.colour, 1.0) * specular;
	
	// Unit normal at surface
	vec3 unit_normal = normalize(normal);
	
	// if light is a directional light
	if (light.type == DIRECTIONAL_LIGHT) {

		vec3 lightToSurface = normalize(light.direction);
		
		// Reflection vector for specular scaling
		vec3 R = reflect(-1 * lightToSurface, unit_normal);
		
		vec4 shadedColour = vec4(0.0, 0.0, 0.0, 1.0);
		
		shadedColour += diffuseColour * (max(0, dot(unit_normal, lightToSurface))) * light.intensity;
		shadedColour += sign(gloss) * specularColour * pow(max(0.0000001, dot(R, normalize(cameraPosition - position))), gloss) * light.intensity;
		
		return shadedColour;
	}
	
	float distanceLightToSurface = length(light.position - position);
	
	if (distanceLightToSurface > light.maxRadius) {
		return vec4(0.0, 0.0, 0.0, 1.0);
	}
	
	// if light is a point light
	else if (light.type == POINT_LIGHT) {
		
		// Reduction from distance from light source
		float fallOff = (1 / pow(distanceLightToSurface, 2));
		
		float adjustedIntensity = fallOff * light.intensity * (1 - interpolate(distanceLightToSurface, 0, light.maxRadius));
		
		// Unit vector that points from the light to the surface
		vec3 surfaceToLight = normalize(light.position - position);
		
		// Reflection vector for specular scaling
		vec3 R = reflect(-1 * surfaceToLight, unit_normal);
		
		vec4 shadedColour = vec4(0.0, 0.0, 0.0, 1.0);
		
		shadedColour += diffuseColour * (max(0, dot(unit_normal, surfaceToLight))) * adjustedIntensity;
		shadedColour += sign(gloss) * specularColour * pow(max(0.0000001, dot(R, normalize(cameraPosition - position))), gloss) * adjustedIntensity;
		
		return shadedColour;
	}
	
	// if light is a spot light
	else if (light.type == SPOTLIGHT) {
		
		vec3 lightToSurface = normalize(position - light.position);
		vec3 lightDirection = normalize(light.direction);
		float cosAngle = dot(lightToSurface, lightDirection);
		
		float min = cos(light.outerRadians / 2);
		// if surface is outside the range of the spotlight's outer angle, do not perform any shading
		if (cosAngle < min) {
			return vec4(0.0, 0.0, 0.0, 1.0);
		}
		
		// Reduction from distance from light source
		float fallOff = (1 / pow(distanceLightToSurface, 2));
		float adjustedIntensity = fallOff * light.intensity * (1 - interpolate(distanceLightToSurface, 0, light.maxRadius));

		float innerBoundary = cos(light.innerRadians / 2);
		
		// if surface is within the inner angle, treat it like a point light shade
		if (cosAngle >= innerBoundary) {
			// Unit vector that points from the light to the surface
			vec3 surfaceToLight = normalize(light.position - position);
			
			// Reflection vector for specular scaling
			vec3 R = reflect(-1 * surfaceToLight, unit_normal);
			
			vec4 shadedColour = vec4(0.0, 0.0, 0.0, 1.0);
			
			shadedColour += diffuseColour * (max(0, dot(unit_normal, surfaceToLight))) * adjustedIntensity;
			shadedColour += sign(gloss) * specularColour * pow(max(0.0000001, dot(R, normalize(cameraPosition - position))), gloss) * adjustedIntensity;
			
			return shadedColour;
		}
		
		// treat like a point light but with diminished intensity
		else {
			
			float diminishedIntensity = adjustedIntensity * interpolate(cosAngle, min, innerBoundary);
		
			// Unit vector that points from the light to the surface
			vec3 surfaceToLight = normalize(light.position - position);
			
			// Reflection vector for specular scaling
			vec3 R = reflect(-1 * surfaceToLight, unit_normal);
			
			vec4 shadedColour = vec4(0.0, 0.0, 0.0, 1.0);
			
			shadedColour += diffuseColour * (max(0, dot(unit_normal, surfaceToLight))) * diminishedIntensity;
			shadedColour += sign(gloss) * specularColour * pow(max(0.0000001, dot(R, normalize(cameraPosition - position))), gloss) * diminishedIntensity;
			
			return shadedColour;

		}

	}
	
	else {
		return vec4(0.0, 0.0, 0.0, 1.0);	
	}
	
}



void main() {

	vec4 ambientLightColour = vec4(1.0, 1.0, 1.0, 1.0);
	vec4 ambientColour = ambientLightColour * ambient;

	vec4 finalColour = vec4(0.0, 0.0, 0.0, 1.0);

	if (num_lights == 4) {
		finalColour += shadePoint(fs_in.position, fs_in.normal, lightUni[0]);
		finalColour += shadePoint(fs_in.position, fs_in.normal, lightUni[1]);
		finalColour += shadePoint(fs_in.position, fs_in.normal, lightUni[2]);
		finalColour += shadePoint(fs_in.position, fs_in.normal, lightUni[3]);
	}

	else if (num_lights == 1) {
		finalColour += shadePoint(fs_in.position, fs_in.normal, lightUni[0]);
	}
	
	else if (num_lights == 2) {
		finalColour += shadePoint(fs_in.position, fs_in.normal, lightUni[0]);
		finalColour += shadePoint(fs_in.position, fs_in.normal, lightUni[1]);
	}
	else if (num_lights == 3) {
		finalColour += shadePoint(fs_in.position, fs_in.normal, lightUni[0]);
		finalColour += shadePoint(fs_in.position, fs_in.normal, lightUni[1]);
		finalColour += shadePoint(fs_in.position, fs_in.normal, lightUni[2]);
	}
	
	vec4 finalAmbient = ambientColour;
	colour = finalAmbient + finalColour;
}