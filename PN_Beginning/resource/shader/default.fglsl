#version 450 core

in VS_OUT {
	vec3 position;
	vec3 normal;
} fs_in;

uniform vec4 ambient;
uniform vec4 diffuse;
uniform vec4 specular;
uniform float gloss;

uniform vec3 lightPosition;
uniform vec3 cameraPosition;

out vec4 colour;

void main() {
	vec4 ambientLightStrength = vec4(1.0, 1.0, 1.0, 1.0);
	vec4 diffuseLightStrength = vec4(1.0, 1.0, 1.0, 1.0);
	vec4 specularLightStrength = vec4(1.0, 1.0, 1.0, 1.0);
	
	vec4 ambientColour = ambientLightStrength * ambient;
	vec4 diffuseColour = diffuseLightStrength * diffuse;
	vec4 specularColour = specularLightStrength * specular;
	
	vec3 R = reflect(-1 * normalize(lightPosition - fs_in.position), normalize(fs_in.normal));
	
//	colour =  vec4((ambientColour + 
//		(max(0, dot(normalize(fs_in.normal), normalize(lightPosition - fs_in.position))) * diffuseColour +
//		pow(max(0, dot(R, normalize(cameraPosition - fs_in.position))), gloss) * specularColour) * (1 / pow(length(lightPosition - fs_in.position), 1))).xyz, 1.0);

	colour = ambientColour + 
			(diffuseColour * (max(0, dot(normalize(fs_in.normal), normalize(lightPosition - fs_in.position)))) +
			specularColour * pow(max(0, dot(R, normalize(cameraPosition - fs_in.position))), gloss)) *
			(1 / pow(length(lightPosition - fs_in.position), 1));
}