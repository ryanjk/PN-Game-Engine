#version 450 core

in VS_OUT {
	vec3 position;
	vec3 normal;
} fs_in;

uniform vec4 ambient;
uniform vec4 diffuse;
uniform vec4 specular;
uniform float gloss;

uniform vec3 lightPosition;
uniform vec3 cameraPosition;

out vec4 colour;

void main() {

	vec4 ambientLightColour = vec4(1.0, 1.0, 1.0, 1.0);
	float ambientLightIntensity = 1;
	
	vec4 lightColour = vec4(1.0, 1.0, 1.0, 1.0);
	float lightIntensity = 10000;
	
	vec4 ambientColour = ambientLightColour * ambient;
	vec4 diffuseColour = lightColour * diffuse;
	vec4 specularColour = lightColour * specular;
	
	vec3 R = reflect(-1 * normalize(lightPosition - fs_in.position), normalize(fs_in.normal));
	
	float fallOff = (1 / pow(length(lightPosition - fs_in.position), 2));
	vec4 finalAmbient = ambientColour;
	vec4 finalDiffuse = diffuseColour * (max(0, dot(normalize(fs_in.normal), normalize(lightPosition - fs_in.position)))) * fallOff;
	vec4 finalSpecular;
	
	if (gloss > 0) {
		finalSpecular = specularColour * pow(max(0, dot(R, normalize(cameraPosition - fs_in.position))), gloss) * fallOff;
	}
	else {
		finalSpecular = vec4(0.0, 0.0, 0.0, 0.0);
	}
	
	colour = finalAmbient * ambientLightIntensity + (finalDiffuse + finalSpecular) * lightIntensity;
}